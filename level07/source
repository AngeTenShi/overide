#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdbool.h>

void clear_stdin()
{
    while (1)
    {
        char result = (char)getchar();
        if (result == '\n' || result == 0xFF)
            break;
    }
}

unsigned int get_unum()
{
    unsigned int number = 0;

    fflush(stdout);
    scanf("%u", &number);
    clear_stdin();

    return number;
}

bool read_number(unsigned int *data)
{
    int index;

    printf(" Index: ");
    index = get_unum();
    printf(" Number at data[%u] is %u\n", index, data[index]);
    return false;
}

bool store_number(int *data)
{
    unsigned int number;
    unsigned int index;

    printf(" Number: ");
    number = get_unum();
    printf(" Index: ");
    index = get_unum();

    // no write on indices that are multiples of 3, and no write when numbers have the form 0xb7xxxxxx
    if (index == 3 * (index / 3) || (number >> 24) == 0xB7)
    {
        puts(" *** ERROR! ***");
        puts("   This index is reserved for wil!");
        puts(" *** ERROR! ***");
        return true;
    }
    else
    {
        data[index] = number;
        return false;
    }
}

int main(int argc, char **argv, char **envp)
{
    int numbers[100] = {0};
    char command[20];
    bool error = false;

    // Shellcode protection
    while (*argv)
    {
        memset(*argv, 0, strlen(*argv));
        ++argv;
    }
    while (*envp)
    {
        memset(*envp, 0, strlen(*envp));
        ++envp;
    }
    puts(
        "----------------------------------------------------\n"
        "  Welcome to wil's crappy number storage service!   \n"
        "----------------------------------------------------\n"
        " Commands:                                          \n"
        "    store - store a number into the data storage    \n"
        "    read  - read a number from the data storage     \n"
        "    quit  - exit the program                        \n"
        "----------------------------------------------------\n"
        "   wil has reserved some storage :>                 \n"
        "----------------------------------------------------\n");
    while (1)
    {
        printf("Input command: ");
        error = true;

        fgets(command, 20, stdin);
        command[strlen(command)] = 0;

        if (!memcmp(&command, "quit", 4))
            return 0;

        if (!memcmp(&command, "store", 5))
            error = store_number(numbers);
        if (!memcmp(&command, "read", 4))
            error = read_number(numbers);

        if (error)
            printf(" Failed to do %s command\n", command);
        else
            printf(" Completed %s command successfully\n", command);
    }
}